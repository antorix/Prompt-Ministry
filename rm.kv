#:import Window kivy.core.window.Window

#:import get_hex_from_color kivy.utils.get_hex_from_color

<TextInputCutCopyPaste>:
    but_cut: cut.__self__
    but_copy: copy.__self__
    but_paste: paste.__self__
    but_selectall: selectall.__self__

    size_hint: None, None
    size: app.textContextMenuSize
    BubbleButton:
        id: cut
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[235]
        on_release: root.do('cut')
    BubbleButton:
        id: copy
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[236]
        on_release: root.do('copy')
    BubbleButton:
        id: paste
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[237]
        on_release: root.do('paste')
    BubbleButton:
        id: selectall
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[238]
        on_release: root.do('selectall')

<RoundButton@Button>:
    color: (app.tableColor if self == app.positive else app.linkColor) if self.state=='normal' else app.titleColor
    background_color: app.roundButtonBGColor
    text_size: self.size
    text: self.text
    rounded: self.rounded
    r: 37 # закругление центральной кнопки
    canvas.before:
        Color:
            rgba: ((app.globalBGColor if self == app.positive else app.buttonBackgroundColor) if self.state=='normal' else ((app.sortButtonBackgroundColor if self == app.positive else app.roundButtonColorPressed) if app.mode == "light" else app.roundButtonColorPressed2)) if self.text != "" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(rad=100 if not self.rounded else self.r, instance=self)[1]
        Color:
            rgba: (app.wiredButtonColor if self.state == "normal" else app.titleColor) if self == app.positive and self.text != "" else [0,0,0,0]
        Line:
            width: app.thickness()[1]
            rounded_rectangle: self.x, self.y, self.width, self.height, app.getRadius(rad=100 if not self.rounded else self.r, instance=self)[0], 500

<FloatButton@Button>:
    color: (app.linkColor if app.button["add_emoji"] not in self.text else app.topButtonColorDarkened) if self.state=='normal' else app.titleColor
    background_color: app.roundButtonBGColor if app.theme != "3D" else [0,0,0,.5]
    text_size: self.size
    canvas.before:
        Color:
            rgba: app.floatButtonBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.theme != "gray" else app.roundButtonColorPressed2)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(1, instance=self)[1]

<RoundColorButton@Button>:
    background_color: app.roundButtonBGColor if app.theme != "3D" else [0,0,0,0]
    color: [1,1,1,1]
    side: self.side
    canvas.before:
        Color:
            rgba: self.color if self.state=='normal' else (app.popupBGColorPressed if app.firstCallPopup else self.color)
        Ellipse:
            pos: self.pos
            size: self.size
        Color:
            rgba: app.floatButtonBGColor if not app.firstCallPopup else [.4, .4, .4, 1]
        Line:
            width: (app.thickness()[0] if not app.firstCallPopup else app.thickness()[1]) if self.color == app.getColor2(0) else 1
            circle: self.center_x, self.center_y, self.size[0]*.5 if self.color == app.getColor2(0) else 0

<ProgressButton@Button>:
    color: [app.titleColor[0], app.titleColor[1], app.titleColor[2], .7]
    background_color: [0,0,0,0]
    pos: Window.center[0] - self.size[0]/2, Window.center[1] - self.size[1]/2
    font_size: app.fontXXL * 1.5
    text: app.button["wait"]
    background_normal: ""
    background_down: ""
    markup: True
    canvas.before:
        Color:
            rgba: [.8,.8,.8,.5] if app.mode == "light" else [.2,.2,.2,.5]
        Ellipse:
            size: self.size[0] * (2 if not app.desktop else 1), self.size[1] * (2 if not app.desktop else 1)
            pos: Window.center[0] - self.size[0] / (1 if not app.desktop else 2), Window.center[1] - self.size[1] / (1 if not app.desktop else 2)

<FirstCallButton1@FirstCallButton>: # нет дома
    color: app.linkColor if self.state == 'normal' else app.titleColorOnBlack
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.popupButtonColor if self.state == 'normal' else app.popupBGColorPressed
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.FCRadius[0]

<FirstCallButton2@FirstCallButton>: # запись
    color: app.linkColor if self.state == 'normal' else app.titleColorOnBlack
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.popupButtonColor if self.state=='normal' else app.popupBGColorPressed
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.FCRadius[1] if app.settings[0][13] == 1 else app.FCRadius[2]

<FirstCallButton3@FirstCallButton>: # отказ
    color: [1,1,1,.95] if self.state == 'normal' else app.titleColorOnBlack
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.getColorForReject() if self.state=='normal' else app.popupBGColorPressed
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.FCRadius[3]

<PopupButton@Button>:
    color: "lightgray" if self.state=='normal' else app.titleColorOnBlack
    background_color: [0,0,0,0] if self.state=='normal' else app.popupBGColorPressed
    text_size: self.size

<PopupButtonGray@PopupButton>:
    color: "lightgray" if self.state=='normal' else app.titleColorOnBlack
    background_color: [.22, .22, .22, 1] if self.state=='normal' else app.popupBGColorPressed
    text_size: self.size

<RetroButton@Button>:
    text_size: self.size[0], None

<MainMenuButton@Button>:
    color: app.mainMenuButtonColor
    background_color: app.mainMenuButtonBackgroundColor if app.theme != "3D" else [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(80, instance=self)[1]

<TableButton@Button>:
    color: app.tableColor if self.state=='normal' else app.titleColor
    background_color: app.roundButtonBGColor
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(instance=self)[1]

<TerTypeButton@Button>:
    text_size: self.size
    on: self.on
    color: app.titleColor
    background_color: app.roundButtonBGColor if app.theme != "3D" else app.blackTint
    canvas.before:
        Color:
            rgba: (([1,1,1,1] if app.mode == "light" else app.scrollButtonBackgroundColor) if self.on else app.globalBGColor) if app.theme != "3D" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(instance=self)[1]

<FlatButton@Button>:
    color: ([1,1,1,.95] if self.state == "normal" else "white") if (self.number is not None and not "." in self.number) or not app.porch.floors() else ((app.getColorForStatus("") if app.mode == "light" else app.getColorForStatus("")) if self.state=='normal' else "white")
    background_color: [0,0,0,0]
    status: self.status
    color2: self.color2
    text: self.text
    flat: self.flat
    number: self.number
    text_size: (None, None) if app.porch.floors() else self.size
    k: .32 # размер кружка
    canvas.before:
        Color:
            rgba: (app.getColorForStatus(self.status) if self.state=='normal' else app.getColorForStatusPressed(self.status)) if (self.number is not None and not "." in self.number) or not app.porch.floors() else ([0,0,0,0] if self.state=='normal' else app.getColorForStatusPressed(self.status))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.flatButtonRadius if not app.desktop else [0,]
        Color:
            rgba: app.getColor2(self.color2, self.flat)
        RoundedRectangle:
            pos: self.pos[0]+2, self.pos[1]+2
            radius: [50,] if app.platform != "win" else [0,]
            size: (self.size[0]*self.size[1])**self.k*app.fontScale(), (self.size[0]*self.size[1])**self.k*app.fontScale()

<MyTextInput_@TextInput>:
    canvas.before:
        Color:
            rgba: app.textInputColor
        Line:
            width: app.thickness()[1]
            #rounded_rectangle: self.x, self.y, self.size[0], self.size[1], [20]#, 500
            rectangle: self.x, self.y, self.size[0], self.size[1]
            #ellipse: self.x, self.y, self.size[0], self.size[1]

<TipButton@Button>:
    text_size: self.size#[0] * .95, self.size[1]

<TopButton@Button>:
    color: app.topButtonColor if self.state=='normal' else (app.titleColor if app.theme != "3D" else app.topButtonColor)
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(instance=self)[1]

<SettingsButton@Button>:
    color: app.topButtonColor if self.state=='normal' else (app.titleColor if app.theme != "3D" else app.topButtonColor)
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(instance=self)[1]

<Timer@Button>:
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(instance=self)[1]

<TTab@TabbedPanelHeader>:
    color: app.tabColors[0] if self.state=='normal' else app.titleColor
    text_size: self.size
    defaultText: self.defaultText
    text: f"{self.defaultText}" if self.state=='normal' else f"[b]{self.defaultText}[/b]"

<SortListButton@Button>:
    color: app.linkColor if self.state=='normal' else app.titleColor
    background_color: app.sortButtonBackgroundColor if self.state=="normal" else app.sortButtonBackgroundColorPressed
    text_size: self.size

<ScrollButton@Button>:
    color: app.linkColor
    background_color: app.roundButtonBGColor
    text_size: self.size
    canvas.before:
        Color:
            rgba: ((app.scrollButtonBackgroundColor if app.displayed.form == "ter" or app.displayed.form == "con" or (app.displayed.form == "houseView" and not app.msg[6] in self.text) else app.globalBGColor) if self.state == "normal" else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)) if app.theme != "3D" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.scrollRadius

<FooterButton@Button>:
    color: get_hex_from_color([app.linkColor[0],app.linkColor[1],app.linkColor[2],.9]) if app.mode == "light" else app.standardTextColor
    background_color: app.globalBGColor
    text_size: [self.size[0], self.size[1]*3]
    canvas.before:
        Color:
            rgba: (app.scrollButtonBackgroundColor if self.state == "normal" else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)) if app.theme != "3D" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.footerRadius

<RecordButton@Button>:
    color: app.standardTextColor
    background_color: app.roundButtonBGColor if app.theme != "3D" else [0,0,0,0]
    text_size: self.size
    canvas.before:
        Color:
            rgba: (app.scrollButtonBackgroundColor if self.state == "normal" else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)) if app.theme != "3D" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(instance=self)[1]

<ColorStatusButton@Button>:
    canvas.before:
        Color:
            rgba: app.colorSelect
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.getRadius(rad=150, instance=self)[1]

<FlatFooterLabel@Label>:
    text_size: self.size

<FloorView@GridLayout>:
    drag_rectangle: self.x, self.y, self.width, self.height

<FontCheckBox@Button>:
    text_size: self.size

<MainScroll@GridLayout>:
    cols: (1 if Window.size[0] < Window.size[1] or app.displayed.form == "repLog" else 2) if app.displayed.form != "porchView" else app.settings[0][10]