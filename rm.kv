#:import Window kivy.core.window.Window

#:import get_hex_from_color kivy.utils.get_hex_from_color

<TextInputCutCopyPaste>:
    but_cut: cut.__self__
    but_copy: copy.__self__
    but_paste: paste.__self__
    but_selectall: selectall.__self__

    size_hint: None, None
    size: app.textContextMenuSize
    BubbleButton:
        id: cut
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[235]
        on_release: root.do('cut')
    BubbleButton:
        id: copy
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[236]
        on_release: root.do('copy')
    BubbleButton:
        id: paste
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[237]
        on_release: root.do('paste')
    BubbleButton:
        id: selectall
        font_name: app.specialFont if app.specialFont != None else "Roboto-Regular"
        text: app.msg[238]
        on_release: root.do('selectall')

<RoundButton@Button>:
    color: app.tableColor if self.state=='normal' else app.titleColor
    background_color: app.roundButtonBGColor
    text_size: self.size
    canvas.before:
        Color:
            rgba: (app.buttonBackgroundColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)) if self.text != "" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<FloatButton@Button>:
    color: (app.linkColor if app.button['phone-thin'] in self.text else (app.linkColor if app.button["add_emoji"] not in self.text else app.topButtonColor)) if self.state=='normal' else app.titleColor
    background_color: app.roundButtonBGColor if app.theme != "3D" else [0,0,0,.5]
    text_size: self.size
    canvas.before:
        Color:
            rgba: app.floatButtonBGColor if self.state=='normal' else app.roundButtonColorPressed
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<RoundColorButton@Button>:
    background_color: app.roundButtonBGColor if app.theme != "3D" else [0,0,0,0]
    color: [1,1,1,1]
    side: self.side
    canvas.before:
        Color:
            rgba: self.color if self.state=='normal' else (app.popupBGColorPressed if app.firstCallPopup else self.color)
        Ellipse:
            pos: self.pos
            size: self.size
        Color:
            rgba: app.floatButtonBGColor if not app.firstCallPopup else [.4, .4, .4, 1]
        Line:
            width: 1 if app.firstCallPopup else (2 if self.color == app.getColor2(0) else 1)
            circle: self.pos[0]+self.size[0]/2, self.pos[1]+self.size[1]/2, (self.size[0]*.5 if self.color == app.getColor2(0) else 0)

<ProgressButton@Button>:
    color: [app.titleColor[0], app.titleColor[1], app.titleColor[2], .7]
    background_color: [0,0,0,0]
    canvas.before:
        Color:
            rgba: [.8,.8,.8,.5] if app.mode == "light" else [.2,.2,.2,.5]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<FirstCallButton1@FirstCallButton>: # нет дома
    color: app.linkColor if self.state == 'normal' else app.titleColorOnBlack
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.popupButtonColor if self.state == 'normal' else app.popupBGColorPressed
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.FCRadius[0]

<FirstCallButton2@FirstCallButton>: # запись
    color: app.linkColor if self.state == 'normal' else app.titleColorOnBlack
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.popupButtonColor if self.state=='normal' else app.popupBGColorPressed
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.FCRadius[1] if app.settings[0][13] == 1 else app.FCRadius[3]

<FirstCallButton3@FirstCallButton>: # отказ
    color: [1,1,1,.95] if self.state == 'normal' else app.titleColorOnBlack
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.getColorForReject() if self.state=='normal' else app.popupBGColorPressed
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.FCRadius[2]

<FirstCallButtonPhone@FirstCallButton>:
    color: ([1,1,1,.95] if self.state=='normal' else app.titleColorOnBlack) if self.height > 0 else [0,0,0,0]
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: (app.getColorForStatus("1") if self.state=='normal' else app.popupBGColorPressed) if self.height > 0 else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.FCRadius[2]

<PopupButton@Button>:
    color: "lightgray" if self.state=='normal' else app.titleColorOnBlack
    background_color: [0,0,0,0] if self.state=='normal' else app.popupBGColorPressed
    text_size: self.size

<PopupButtonGray@PopupButton>:
    color: "lightgray" if self.state=='normal' else app.titleColorOnBlack
    background_color: [.2, .2, .2, 1] if self.state=='normal' else app.popupBGColorPressed
    text_size: self.size

<RetroButton@Button>:
    text_size: self.size[0], None

<MainMenuButton@Button>:
    color: app.mainMenuButtonColor
    background_color: app.mainMenuButtonBackgroundColor if app.theme != "3D" else [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<TableButton@Button>:
    color: (app.linkColor if not self.disabled and app.button['phone'] in self.text else app.tableColor) if self.state=='normal' else app.titleColor
    background_color: app.roundButtonBGColor
    canvas.before:
        Color:
            rgba: (app.floatButtonBGColor if not self.disabled and app.button['phone'] in self.text else app.globalBGColor) if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<FlatButton@Button>:
    color: ([1,1,1,.95] if self.state == "normal" else "white") if (self.number is not None and not "." in self.number) or not app.porch.floors() else ((app.getColorForStatus("") if app.mode == "light" else app.getColorForStatus("")) if self.state=='normal' else "white")
    background_color: [0,0,0,0]
    status: self.status
    color2: self.color2
    text: self.text
    number: self.number
    flat: self.flat
    text_size: (None, None) if app.grid else self.size
    background_normal: ""
    background_down: ""
    markup: True
    halign: "center"
    valign: "center"
    k: .15
    canvas.before:
        Color:
            rgba: (app.getColorForStatus(self.status) if self.state=='normal' else app.getColorForStatusPressed(self.status)) if (self.number is not None and not "." in self.number) or not app.porch.floors() else ([app.globalBGColor[0], app.globalBGColor[1], app.globalBGColor[2], 1] if self.state=='normal' else app.getColorForStatusPressed(self.status))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius
        Color:
            rgba: app.getColor2(self.color2, self.flat)
        RoundedRectangle:
            pos: self.pos[0]+2, self.pos[1]+2
            size: (self.size[0]*self.k, self.size[0]*self.k) if self.size[0] < self.size[1] else (self.size[1]*self.k, self.size[1]*self.k)
            radius: [50,] if app.platform != "win" else [0,]
        Color:
            rgba: [1,1,1,.5]
        Line:
            #circle: self.pos[0]+self.size[0]/2, self.pos[1]+self.size[1]/2, self.size[0]*.25

<TipButton@Button>:
    text_size: self.size[0] * .95, self.size[1]

<TopButton@Button>:
    color: app.topButtonColor if self.state=='normal' else (app.titleColor if app.theme != "3D" else app.topButtonColor)
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<SettingsButton@Button>:
    color: app.topButtonColor if self.state=='normal' else (app.titleColor if app.theme != "3D" else app.topButtonColor)
    background_color: [1,1,1,0]
    #text_size: self.size
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<Timer@Button>:
    background_color: [1,1,1,0]
    canvas.before:
        Color:
            rgba: app.globalBGColor if self.state=='normal' else (app.roundButtonColorPressed if app.mode == "light" else (app.roundButtonColorPressed2 if app.theme != "3D" else app.popupBGColorPressed))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<TTab@TabbedPanelHeader>:
    color: app.tabColors[0] if self.state=='normal' else app.titleColor
    text_size: self.size

<SortListButton@Button>:
    color: app.linkColor if self.state=='normal' else app.titleColor
    background_color: app.sortButtonBackgroundColor if self.state=="normal" else app.sortButtonBackgroundColorPressed
    text_size: self.size

<ScrollButton@Button>:
    color: app.linkColor
    background_color: app.roundButtonBGColor if app.theme != "3D" else app.roundButtonBGColor
    text_size: self.size[0] * (.95 if app.displayed.form != "ter" and app.displayed.form != "con" else .93), self.size[1]
    canvas.before:
        Color:
            rgba: ((app.scrollButtonBackgroundColor if app.displayed.form == "ter" or app.displayed.form == "con" else app.globalBGColor) if self.state == "normal" else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)) if app.theme != "3D" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.scrollRadius

<FooterButton@Button>:
    color: get_hex_from_color([app.linkColor[0],app.linkColor[1],app.linkColor[2],.9]) if app.mode == "light" else app.standardTextColor
    background_color: app.globalBGColor
    text_size: self.size[0], self.size[1]*3
    canvas.before:
        Color:
            rgba: (app.scrollButtonBackgroundColor if self.state == "normal" else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)) if app.theme != "3D" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.footerRadius

<RecordButton@Button>:
    color: app.standardTextColor
    background_color: app.roundButtonBGColor if app.theme != "3D" else [0,0,0,0]
    text_size: self.size[0] * .92, self.size[1]
    canvas.before:
        Color:
            rgba: (app.scrollButtonBackgroundColor if self.state == "normal" else (app.roundButtonColorPressed if app.mode == "light" else app.roundButtonColorPressed2)) if app.theme != "3D" else [0,0,0,0]
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [app.scrollRadius[0], app.scrollRadius[0], app.scrollRadius[0], app.scrollRadius[0]]

<ColorStatusButton@Button>:
    canvas.before:
        Color:
            rgba: app.colorSelect
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: app.radius

<FlatFooterLabel@Label>:
    text_size: self.size